/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'org.javamodularity.moduleplugin' version "1.6.0"
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.9-SNAPSHOT'
    id 'org.beryx.jlink' version '2.17.0'
    id 'net.researchgate.release' version '2.6.0'
}

repositories {
    mavenLocal()
    maven {
        url = 'https://repo.maven.apache.org/maven2'
    }
    jcenter()
}

dependencies {
    implementation 'com.google.guava:guava:28.1-jre'
    implementation 'commons-io:commons-io:2.6'
    implementation 'org.openjfx:javafx-controls:13.0.1'
    implementation 'org.openjfx:javafx-graphics:13.0.1'
    implementation 'org.openjfx:javafx-base:13.0.1'
    implementation 'org.openjfx:javafx-fxml:13.0.1'
    implementation 'com.google.protobuf:protobuf-java:3.10.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
    // Force Gradle to load the JUnit Platform Launcher from the module-path, as
    // configured in buildSrc/.../ModulePlugin.java -- see SKARA-69 for details.
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.5.2'
}

group = 'com.github.nicholasmoser'
version = '3.0-SNAPSHOT'
description = 'GNTool'
sourceCompatibility = '14'

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}

javafx {
    version = "13.0.1"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

mainClassName = "com.github.nicholasmoser/com.github.nicholasmoser.GNTool"

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'GNTool'
    }
}

task ffmpeg(type: Copy) {
    from file("ffmpeg.exe")
    into file("$buildDir/image/bin")
}

task ffmpegLicense(type: Copy) {
    from "licenses/ffmpeg"
    into "$buildDir/image/legal/ffmpeg"
}

task txg2tpl(type: Copy) {
    from file("TXG2TPL.exe")
    into file("$buildDir/image/bin")
}

task txg2tplLicense(type: Copy) {
    from "licenses/txg2tpl"
    into "$buildDir/image/legal/txg2tpl"
}

task extra (dependsOn: [ffmpeg, ffmpegLicense, txg2tpl, txg2tplLicense])
